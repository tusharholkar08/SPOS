import java.util.Scanner;

public class SJF {
    public static void main(String[] args) {
        Scanner sn = new Scanner(System.in);

        System.out.print("Enter Number of processes You Want");
        int n = sn.nextInt();

        int process[] = new int[n];
        int arrival[] = new int[n];
        int burst[] = new int[n];
        int completion[] = new int[n];
        int TAT[] = new int[n];
        int WT[] = new int[n];

        int oriburst[] = new int[n];
        int flag[] = new int[n];

        for (int i = 0; i < n; i++) {
            System.out.print("Enter Process " + (i + 1) + " Arrival Time :");
            arrival[i] = sn.nextInt();

            System.out.print("Enter Process " + (i + 1) + " burst Time :");
            burst[i] = sn.nextInt();

            oriburst[i] = burst[i];

            flag[i] = 0;
            process[i] = i + 1;
        }

        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                if (arrival[i] > arrival[j]) {
                    int temp = arrival[i];
                    arrival[i] = arrival[j];
                    arrival[j] = temp;

                    temp = burst[i];
                    burst[i] = burst[j];
                    burst[j] = temp;

                    temp = process[i];
                    process[i] = process[j];
                    process[j] = temp;

                    temp = oriburst[i];
                    oriburst[i] = oriburst[j];
                    oriburst[j] = temp;
                }
            }
        }
        int tot = 0;
        int st = 0;

        while (true) {
            int max = 99;
            int c = 0;

            if (tot == n)
            {
                break;
            }

            for (int i = 0; i < n; i++) {
                if (arrival[i] <= st && flag[i] == 0 && burst[i] < max) {
                    max = burst[i];
                    c = i;
                }
            }
            if (c == n) {
                st++;
            } else {
                burst[c]--;
                st++;
                if (burst[c] == 0) {
                    tot++;
                    flag[c] = 1;
                    completion[c] = st;
                }
            }
        }

        float total=0,wait=0;
		
		System.out.print("\nProcess\t\tArrival\t\tburst\t Completion\t\tWT\t\tTAT");
		for(int i=0;i<n;i++)
		{
			TAT[i]=completion[i]-arrival[i];
			total=total+TAT[i];
			
			WT[i]=TAT[i]-oriburst[i];
			wait=wait+WT[i];
			
			System.out.print("\n"+process[i]+"\t\t"+arrival[i]+"\t\t"+oriburst[i]+"\t\t"+completion[i]+"\t\t"+WT[i]+"\t\t"+TAT[i]);
		}
		
		System.out.print("\n\nAverge Wait Time :"+(wait/n));
		System.out.print("\nAverge Turn Around Time :"+(total/n));
    }

}
